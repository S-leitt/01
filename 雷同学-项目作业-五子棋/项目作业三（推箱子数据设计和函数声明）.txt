-------------------------数据设计-----------------------------
/*按键消息（easyx.h）内可查*/
ExMessage msg = { 0 };
/*照片组*/
IMAGE img_game[7];
/*该枚举用具体含义代表数字方便内容理解*/
enum Game
{  
   Space=0,//空地
   Wall=1,//墙体
   Player=2,//玩家
   Box=3,//箱子
   Dest=4//目的地

};
/*该变量用来表示关卡数*/
int level = 0;
/*该三维数组表示关卡和对应的地图*/
int map[4][10][10] = {
	{
{0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,1,1,1,1,0,0},
{0,0,0,1,1,2,4,1,0,0},
{0,0,0,1,4,3,3,1,0,0},
{0,0,1,1,0,3,0,1,0,0},
{0,0,1,0,4,1,0,1,0,0},
{0,0,1,0,0,0,0,1,0,0},
{0,0,1,0,0,1,1,1,0,0},
{0,0,1,1,1,1,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0},
},{
{0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,1,1,0,0,0,0},
{0,0,0,1,4,1,0,0,0,0},
{0,0,0,1,0,1,1,1,1,0},
{0,1,1,1,3,3,0,4,1,0},
{0,1,4,3,2,3,1,1,1,0},
{0,1,1,1,1,0,1,0,0,0},
{0,0,0,0,1,4,1,0,0,0},
{0,0,0,0,1,1,1,0,0,0},
{0,0,0,0,0,0,0,0,0,0},
},
{
{0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,0},
{0,1,4,0,0,0,0,4,1,0},
{0,1,0,0,0,0,0,0,1,0},
{0,1,0,0,4,0,0,0,1,0},
{0,1,0,0,0,3,0,0,1,0},
{0,1,0,0,0,0,3,3,1,0},
{0,1,4,0,0,0,3,2,1,0},
{0,1,1,1,1,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0},
},
{
{0,0,0,0,0,0,0,0,0,0},
{0,1,1,1,1,1,1,1,1,0},
{0,1,4,0,0,3,0,4,1,0},
{0,1,0,0,0,0,0,0,1,0},
{0,1,3,0,0,0,0,0,1,0},
{0,1,0,0,2,0,0,3,1,0},
{0,1,0,0,0,0,0,0,1,0},
{0,1,4,0,3,0,0,4,1,0},
{0,1,1,1,1,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0},
}

};
---------------------------数据设计------------------------------
---------------------------函数声明------------------------------
/*
   函数功能：展示地图
   map[level][10][10]={
   {0001110000}，
   {0001010000}，
   {0001011110}，
   {0111330010}，
   {0103231110}，
   {0111101000}，
   {0000101000}，
   {0000111000}，
   {0000000000}，
   {0000000000}，
   {0000000000}，
   }
  其中： 0：代表空地（Space），玩家可正常移动；
        1：代表墙（Wall），玩家无法移动；
		2：代表玩家（Player），坐标map[level][i][j],使用WASD移动，每次移动一格，+=Player代表玩家到达（覆盖）此地，-=Player代表玩家离开此地；
		3：代表箱子（Box），+=Box代表箱子到达此地，-=Box代表箱子离开此地；
		4：代表目的地，覆盖所有目的地后游戏胜利；
参数：void ;
返回值：void;
*/
void MapDraw()；


/*
函数功能：
  实现玩家的移动
  玩家坐标：map[level][i][j]，玩家移动：先判断
  1.前方空地：正常移动
  2.前方箱子：二次判断箱子前方
             1.空地：正常移动
			 2.墙：不动
			 3.目的地，覆盖目的地时改变值便于判断游戏胜利
  3.前方目的地：正常移动
  玩家向上移动：W    map[level][i][j]-=Player&&map[level][i-1][j]+=Player;
  玩家向下移动：S    map[level][i][j]-=Player&&map[level][i+1][j]+=Player;
  玩家向左移动：A    map[level][i][j]-=Player&&map[level][i][j-1]+=Player;
  玩家向右移动：D    map[level][i][j]-=Player&&map[level][i][j+1]+=Player;
 参数：void
 返回值：void
*/
void PlayerMove()；


/*游戏界面
 功能：
	0.初始化游戏数据
	while(1){
	1.初始化游戏地图（由空地（Space 0），墙（Wall，1），玩家（Player，2），箱子（Box，3），目的地（Dest，4）组成）---Init();
		当人物覆盖目的地（Player+Dest，6）  当箱子到达目的地（Box+Dest，7）-用枚举实现
	2.玩家通过键盘按键‘W’‘A’‘S’‘D’操控人物移动,分别对应上下左右----PlayerMove();
	3.当箱子都到达目的地时通关游戏，弹出胜利界面----IsWin()判断并展示;
 参数：void
 返回值： void
	*/
void GameView()；


/*设置界面
功能：
	玩家通过键盘W，S，enter选择
	1.打开/关闭音效
	2.打开/关闭音乐
	3.返回主菜单
 参数：void
 返回值：void
*/
void SetMenu();、


/*菜单界面(easyx)
功能：
	展示开始游戏，设置，退出游戏三个选项
	用户可通过ws进行选择，enter确认。
	选择游戏时初始化游戏界面开始游戏
	选择设置时弹出设置窗口进行设置
	选择退出游戏时退出程序w
参数：void
返回值：void
*/
void MenuView(void)